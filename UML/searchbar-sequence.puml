@startuml 

/' 
More information here:
https://plantuml.com/sequence-diagram
made with:
https://plantuml-editor.kkeisuke.com/
'/

title 
Searchbar Component - Sequence
end title
header  ""
caption ""
footer 
created by Dan
end footer


/'STYLE'/
'do not use UML style
skinparam componentStyle rectangle

'make appearance more neutral 
skinparam Shadowing false
skinparam ArrowColor #black
skinparam InterfaceBorderColor #black

skinparam RectangleBackgroundColor #lightgrey
skinparam InterfaceBackgroundColor #white

skinparam SequenceBoxBorderColor #black
skinparam SequenceLifeLineBorderColor #black
skinparam SequenceLifeLineBorderColor #black
skinparam SequenceActorBorderColor #black
skinparam SequenceBorderColor #black
skinparam SequenceParticipantBorderColor #black
skinparam NoteBorderColor #black

skinparam QueueBackgroundColor #white
skinparam QueueBorderColor #black

skinparam ActorBackgroundColor #white

'use standard font
skinparam DefaultFontName "Segoe UI"


/' Declarations '/
actor "User"
participant "Child Component"
participant "Parent Component"
database "Data"

/'Flow '/
"User" -> "Child Component": Enter Text
"Child Component" -> "Child Component": This sets state in \nchild component onChange={} 
"User" -> "Child Component": Submits form
"Child Component" -> "Parent Component": Calls props.function \nwithin parent component via \nvia onSubmit={}
"Parent Component" -> "Data": Makes API Request
"Data" -> "Parent Component" : (200 OK)
"Parent Component" -> "Child Component": Via props passes data \nback to child state
"Child Component" -> "Child Component": Renders Data from State \nto JSX Element
"Child Component" -> "User": new HTML renderd to User
"User" -> "Child Component": Changes text
"Child Component" -> "Child Component": onChange={} updates state for child 
"User" --> "Child Component": Submits \n(Flow continues as above)...
/'END Flow '/

@enduml
